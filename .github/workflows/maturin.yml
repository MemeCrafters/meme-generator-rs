name: Build wheels

on:
  push:
    branches:
      - main
    paths:
      - "meme_generator/**"
      - "meme_generator_py/**"
    tags:
      - "*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_wheels:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-20.04
            target: x86_64
            os: linux
          - runner: ubuntu-latest
            target: aarch64
            os: linux
            script: |
              echo "" > /etc/apt/sources.list
              echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-security main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-backports main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main multiverse universe" >> /etc/apt/sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main multiverse universe" >> /etc/apt/sources.list
              dpkg --add-architecture arm64
              apt-get update && apt-get install -y libssl-dev:arm64 libfontconfig1-dev:arm64 libfreetype6-dev:arm64
              cp /usr/include/aarch64-linux-gnu/openssl/* /usr/include/openssl/
              export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu/
              export OPENSSL_INCLUDE_DIR=/usr/include/
          - runner: windows-latest
            target: x86_64
            os: windows
          - runner: macos-latest
            target: x86_64
            os: macos
          - runner: macos-latest
            target: aarch64
            os: macos

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          working-directory: meme_generator_py
          args: --release --out dist
          before-script-linux: ${{ matrix.platform.script || '' }}
          sccache: true

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: meme-generator-wheels-${{ matrix.platform.os }}-${{ matrix.platform.target }}
          path: meme_generator_py/dist

  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: meme_generator_py
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: meme-generator-wheels-sdist
          path: meme_generator_py/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_wheels, build_sdist]
    steps:
      - uses: actions/download-artifact@v4

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing meme-generator-wheels-*/*
